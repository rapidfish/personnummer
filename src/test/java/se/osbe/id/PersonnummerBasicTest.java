package se.osbe.id;

import org.joda.time.LocalDate;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import se.osbe.id.enums.GenderType;
import se.osbe.id.enums.PnrZodiacType;
import se.osbe.id.exception.PersonnummerException;
import se.osbe.id.helper.PersonnummerBuilder;
import se.osbe.id.helper.PersonnummerHelper;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import static org.junit.Assert.assertTrue;

public class PersonnummerBasicTest {

    private List<String> _pnrOKList;
    private List<String> _pnrNOKList;
    final int ERA_MINUS_ONE = (LocalDate.now().getCenturyOfEra() - 1);

    @Before
    public void before() {
        // OK
        _pnrOKList = Arrays.asList(
                "1212121212",
                "121212-1212",
                "121212+1212",
                "191212121212",
                "19121212-1212",
                "4604300014",
                "460430-0014",
                "460430+0014",
                "194604300014",
                "19460430-0014",
                "18180112-0302",
                "19801010-0009",
                "19801110-0008",
                "19801210-0007",
                "040229-0308"
        );

        // NOK
        _pnrNOKList = Arrays.asList(
                "1801170000", // 1800, last4 digits all zero
                "180117-0000", // 1800, last4 digits all zero
                "180117+0000", // 1800, last4 digits all zero
                "18180117-0000", // 1800, last4 digits all zero
                "191801170000", // 1900, last4 digits all zero
                "19180117-0000", // 1900, last4 digits all zero
                "201801170000", // 2000, last4 digits all zero
                "20180117-0000", // 2000, last4 digits all zero
                "abc", // no digits at all
                "123", // too short
                "x1212121212", // char before valid digits
                "161212121212", // 16 as era is used to indicate 'Organisationsnummer' (not Pnr)
                "171212121212", // 17 as era is not valid
                "211212121212", // 21 as era is in the future
                "050229-0307", // As 2005 is not a leap year, the date 29/2 is invalid
                "1212121213", // The checksum '3' is invalid
                "121212-1213", // Wrong checksum
                "121212+1213", // Wrong checksum
                "191212121213", // Wrong checksum
                "19121212-1213", // Wrong checksum
                "201212121213", // Wrong checksum
                "20121212-1213", // Wrong checksum
                "21991212-1218", // In the future
                "219912121218", // In the future
                "21991212-1219" // In the future, wrong checksum
        ); // last4 digits all zero
    }

    /*
     * Basic parse validations
     */

    @Test
    public void testAllSsnForOneDayOK() {
        // OK test
        Arrays.asList(
                "19910722-0007", "19910722-0015", "19910722-0023", "19910722-0031", "19910722-0049",
                "19910722-0056", "19910722-0064", "19910722-0072", "19910722-0080", "19910722-0098",
                "19910722-0106", "19910722-0114", "19910722-0122", "19910722-0130", "19910722-0148",
                "19910722-0155", "19910722-0163", "19910722-0171", "19910722-0189", "19910722-0197",
                "19910722-0205", "19910722-0213", "19910722-0221", "19910722-0239", "19910722-0247",
                "19910722-0254", "19910722-0262", "19910722-0270", "19910722-0288", "19910722-0296",
                "19910722-0304", "19910722-0312", "19910722-0320", "19910722-0338", "19910722-0346",
                "19910722-0353", "19910722-0361", "19910722-0379", "19910722-0387", "19910722-0395",
                "19910722-0403", "19910722-0411", "19910722-0429", "19910722-0437", "19910722-0445",
                "19910722-0452", "19910722-0460", "19910722-0478", "19910722-0486", "19910722-0494",
                "19910722-0502", "19910722-0510", "19910722-0528", "19910722-0536", "19910722-0544",
                "19910722-0551", "19910722-0569", "19910722-0577", "19910722-0585", "19910722-0593",
                "19910722-0601", "19910722-0619", "19910722-0627", "19910722-0635", "19910722-0643",
                "19910722-0650", "19910722-0668", "19910722-0676", "19910722-0684", "19910722-0692",
                "19910722-0700", "19910722-0718", "19910722-0726", "19910722-0734", "19910722-0742",
                "19910722-0759", "19910722-0767", "19910722-0775", "19910722-0783", "19910722-0791",
                "19910722-0809", "19910722-0817", "19910722-0825", "19910722-0833", "19910722-0841",
                "19910722-0858", "19910722-0866", "19910722-0874", "19910722-0882", "19910722-0890",
                "19910722-0908", "19910722-0916", "19910722-0924", "19910722-0932", "19910722-0940",
                "19910722-0957", "19910722-0965", "19910722-0973", "19910722-0981", "19910722-0999",
                "19910722-1005", "19910722-1013", "19910722-1021", "19910722-1039", "19910722-1047",
                "19910722-1054", "19910722-1062", "19910722-1070", "19910722-1088", "19910722-1096",
                "19910722-1104", "19910722-1112", "19910722-1120", "19910722-1138", "19910722-1146",
                "19910722-1153", "19910722-1161", "19910722-1179", "19910722-1187", "19910722-1195",
                "19910722-1203", "19910722-1211", "19910722-1229", "19910722-1237", "19910722-1245",
                "19910722-1252", "19910722-1260", "19910722-1278", "19910722-1286", "19910722-1294",
                "19910722-1302", "19910722-1310", "19910722-1328", "19910722-1336", "19910722-1344",
                "19910722-1351", "19910722-1369", "19910722-1377", "19910722-1385", "19910722-1393",
                "19910722-1401", "19910722-1419", "19910722-1427", "19910722-1435", "19910722-1443",
                "19910722-1450", "19910722-1468", "19910722-1476", "19910722-1484", "19910722-1492",
                "19910722-1500", "19910722-1518", "19910722-1526", "19910722-1534", "19910722-1542",
                "19910722-1559", "19910722-1567", "19910722-1575", "19910722-1583", "19910722-1591",
                "19910722-1609", "19910722-1617", "19910722-1625", "19910722-1633", "19910722-1641",
                "19910722-1658", "19910722-1666", "19910722-1674", "19910722-1682", "19910722-1690",
                "19910722-1708", "19910722-1716", "19910722-1724", "19910722-1732", "19910722-1740",
                "19910722-1757", "19910722-1765", "19910722-1773", "19910722-1781", "19910722-1799",
                "19910722-1807", "19910722-1815", "19910722-1823", "19910722-1831", "19910722-1849",
                "19910722-1856", "19910722-1864", "19910722-1872", "19910722-1880", "19910722-1898",
                "19910722-1906", "19910722-1914", "19910722-1922", "19910722-1930", "19910722-1948",
                "19910722-1955", "19910722-1963", "19910722-1971", "19910722-1989", "19910722-1997",
                "19910722-2003", "19910722-2011", "19910722-2029", "19910722-2037", "19910722-2045",
                "19910722-2052", "19910722-2060", "19910722-2078", "19910722-2086", "19910722-2094",
                "19910722-2102", "19910722-2110", "19910722-2128", "19910722-2136", "19910722-2144",
                "19910722-2151", "19910722-2169", "19910722-2177", "19910722-2185", "19910722-2193",
                "19910722-2201", "19910722-2219", "19910722-2227", "19910722-2235", "19910722-2243",
                "19910722-2250", "19910722-2268", "19910722-2276", "19910722-2284", "19910722-2292",
                "19910722-2300", "19910722-2318", "19910722-2326", "19910722-2334", "19910722-2342",
                "19910722-2359", "19910722-2367", "19910722-2375", "19910722-2383", "19910722-2391",
                "19910722-2409", "19910722-2417", "19910722-2425", "19910722-2433", "19910722-2441",
                "19910722-2458", "19910722-2466", "19910722-2474", "19910722-2482", "19910722-2490",
                "19910722-2508", "19910722-2516", "19910722-2524", "19910722-2532", "19910722-2540",
                "19910722-2557", "19910722-2565", "19910722-2573", "19910722-2581", "19910722-2599",
                "19910722-2607", "19910722-2615", "19910722-2623", "19910722-2631", "19910722-2649",
                "19910722-2656", "19910722-2664", "19910722-2672", "19910722-2680", "19910722-2698",
                "19910722-2706", "19910722-2714", "19910722-2722", "19910722-2730", "19910722-2748",
                "19910722-2755", "19910722-2763", "19910722-2771", "19910722-2789", "19910722-2797",
                "19910722-2805", "19910722-2813", "19910722-2821", "19910722-2839", "19910722-2847",
                "19910722-2854", "19910722-2862", "19910722-2870", "19910722-2888", "19910722-2896",
                "19910722-2904", "19910722-2912", "19910722-2920", "19910722-2938", "19910722-2946",
                "19910722-2953", "19910722-2961", "19910722-2979", "19910722-2987", "19910722-2995",
                "19910722-3001", "19910722-3019", "19910722-3027", "19910722-3035", "19910722-3043",
                "19910722-3050", "19910722-3068", "19910722-3076", "19910722-3084", "19910722-3092",
                "19910722-3100", "19910722-3118", "19910722-3126", "19910722-3134", "19910722-3142",
                "19910722-3159", "19910722-3167", "19910722-3175", "19910722-3183", "19910722-3191",
                "19910722-3209", "19910722-3217", "19910722-3225", "19910722-3233", "19910722-3241",
                "19910722-3258", "19910722-3266", "19910722-3274", "19910722-3282", "19910722-3290",
                "19910722-3308", "19910722-3316", "19910722-3324", "19910722-3332", "19910722-3340",
                "19910722-3357", "19910722-3365", "19910722-3373", "19910722-3381", "19910722-3399",
                "19910722-3407", "19910722-3415", "19910722-3423", "19910722-3431", "19910722-3449",
                "19910722-3456", "19910722-3464", "19910722-3472", "19910722-3480", "19910722-3498",
                "19910722-3506", "19910722-3514", "19910722-3522", "19910722-3530", "19910722-3548",
                "19910722-3555", "19910722-3563", "19910722-3571", "19910722-3589", "19910722-3597",
                "19910722-3605", "19910722-3613", "19910722-3621", "19910722-3639", "19910722-3647",
                "19910722-3654", "19910722-3662", "19910722-3670", "19910722-3688", "19910722-3696",
                "19910722-3704", "19910722-3712", "19910722-3720", "19910722-3738", "19910722-3746",
                "19910722-3753", "19910722-3761", "19910722-3779", "19910722-3787", "19910722-3795",
                "19910722-3803", "19910722-3811", "19910722-3829", "19910722-3837", "19910722-3845",
                "19910722-3852", "19910722-3860", "19910722-3878", "19910722-3886", "19910722-3894",
                "19910722-3902", "19910722-3910", "19910722-3928", "19910722-3936", "19910722-3944",
                "19910722-3951", "19910722-3969", "19910722-3977", "19910722-3985", "19910722-3993",
                "19910722-4009", "19910722-4017", "19910722-4025", "19910722-4033", "19910722-4041",
                "19910722-4058", "19910722-4066", "19910722-4074", "19910722-4082", "19910722-4090",
                "19910722-4108", "19910722-4116", "19910722-4124", "19910722-4132", "19910722-4140",
                "19910722-4157", "19910722-4165", "19910722-4173", "19910722-4181", "19910722-4199",
                "19910722-4207", "19910722-4215", "19910722-4223", "19910722-4231", "19910722-4249",
                "19910722-4256", "19910722-4264", "19910722-4272", "19910722-4280", "19910722-4298",
                "19910722-4306", "19910722-4314", "19910722-4322", "19910722-4330", "19910722-4348",
                "19910722-4355", "19910722-4363", "19910722-4371", "19910722-4389", "19910722-4397",
                "19910722-4405", "19910722-4413", "19910722-4421", "19910722-4439", "19910722-4447",
                "19910722-4454", "19910722-4462", "19910722-4470", "19910722-4488", "19910722-4496",
                "19910722-4504", "19910722-4512", "19910722-4520", "19910722-4538", "19910722-4546",
                "19910722-4553", "19910722-4561", "19910722-4579", "19910722-4587", "19910722-4595",
                "19910722-4603", "19910722-4611", "19910722-4629", "19910722-4637", "19910722-4645",
                "19910722-4652", "19910722-4660", "19910722-4678", "19910722-4686", "19910722-4694",
                "19910722-4702", "19910722-4710", "19910722-4728", "19910722-4736", "19910722-4744",
                "19910722-4751", "19910722-4769", "19910722-4777", "19910722-4785", "19910722-4793",
                "19910722-4801", "19910722-4819", "19910722-4827", "19910722-4835", "19910722-4843",
                "19910722-4850", "19910722-4868", "19910722-4876", "19910722-4884", "19910722-4892",
                "19910722-4900", "19910722-4918", "19910722-4926", "19910722-4934", "19910722-4942",
                "19910722-4959", "19910722-4967", "19910722-4975", "19910722-4983", "19910722-4991",
                "19910722-5006", "19910722-5014", "19910722-5022", "19910722-5030", "19910722-5048",
                "19910722-5055", "19910722-5063", "19910722-5071", "19910722-5089", "19910722-5097",
                "19910722-5105", "19910722-5113", "19910722-5121", "19910722-5139", "19910722-5147",
                "19910722-5154", "19910722-5162", "19910722-5170", "19910722-5188", "19910722-5196",
                "19910722-5204", "19910722-5212", "19910722-5220", "19910722-5238", "19910722-5246",
                "19910722-5253", "19910722-5261", "19910722-5279", "19910722-5287", "19910722-5295",
                "19910722-5303", "19910722-5311", "19910722-5329", "19910722-5337", "19910722-5345",
                "19910722-5352", "19910722-5360", "19910722-5378", "19910722-5386", "19910722-5394",
                "19910722-5402", "19910722-5410", "19910722-5428", "19910722-5436", "19910722-5444",
                "19910722-5451", "19910722-5469", "19910722-5477", "19910722-5485", "19910722-5493",
                "19910722-5501", "19910722-5519", "19910722-5527", "19910722-5535", "19910722-5543",
                "19910722-5550", "19910722-5568", "19910722-5576", "19910722-5584", "19910722-5592",
                "19910722-5600", "19910722-5618", "19910722-5626", "19910722-5634", "19910722-5642",
                "19910722-5659", "19910722-5667", "19910722-5675", "19910722-5683", "19910722-5691",
                "19910722-5709", "19910722-5717", "19910722-5725", "19910722-5733", "19910722-5741",
                "19910722-5758", "19910722-5766", "19910722-5774", "19910722-5782", "19910722-5790",
                "19910722-5808", "19910722-5816", "19910722-5824", "19910722-5832", "19910722-5840",
                "19910722-5857", "19910722-5865", "19910722-5873", "19910722-5881", "19910722-5899",
                "19910722-5907", "19910722-5915", "19910722-5923", "19910722-5931", "19910722-5949",
                "19910722-5956", "19910722-5964", "19910722-5972", "19910722-5980", "19910722-5998",
                "19910722-6004", "19910722-6012", "19910722-6020", "19910722-6038", "19910722-6046",
                "19910722-6053", "19910722-6061", "19910722-6079", "19910722-6087", "19910722-6095",
                "19910722-6103", "19910722-6111", "19910722-6129", "19910722-6137", "19910722-6145",
                "19910722-6152", "19910722-6160", "19910722-6178", "19910722-6186", "19910722-6194",
                "19910722-6202", "19910722-6210", "19910722-6228", "19910722-6236", "19910722-6244",
                "19910722-6251", "19910722-6269", "19910722-6277", "19910722-6285", "19910722-6293",
                "19910722-6301", "19910722-6319", "19910722-6327", "19910722-6335", "19910722-6343",
                "19910722-6350", "19910722-6368", "19910722-6376", "19910722-6384", "19910722-6392",
                "19910722-6400", "19910722-6418", "19910722-6426", "19910722-6434", "19910722-6442",
                "19910722-6459", "19910722-6467", "19910722-6475", "19910722-6483", "19910722-6491",
                "19910722-6509", "19910722-6517", "19910722-6525", "19910722-6533", "19910722-6541",
                "19910722-6558", "19910722-6566", "19910722-6574", "19910722-6582", "19910722-6590",
                "19910722-6608", "19910722-6616", "19910722-6624", "19910722-6632", "19910722-6640",
                "19910722-6657", "19910722-6665", "19910722-6673", "19910722-6681", "19910722-6699",
                "19910722-6707", "19910722-6715", "19910722-6723", "19910722-6731", "19910722-6749",
                "19910722-6756", "19910722-6764", "19910722-6772", "19910722-6780", "19910722-6798",
                "19910722-6806", "19910722-6814", "19910722-6822", "19910722-6830", "19910722-6848",
                "19910722-6855", "19910722-6863", "19910722-6871", "19910722-6889", "19910722-6897",
                "19910722-6905", "19910722-6913", "19910722-6921", "19910722-6939", "19910722-6947",
                "19910722-6954", "19910722-6962", "19910722-6970", "19910722-6988", "19910722-6996",
                "19910722-7002", "19910722-7010", "19910722-7028", "19910722-7036", "19910722-7044",
                "19910722-7051", "19910722-7069", "19910722-7077", "19910722-7085", "19910722-7093",
                "19910722-7101", "19910722-7119", "19910722-7127", "19910722-7135", "19910722-7143",
                "19910722-7150", "19910722-7168", "19910722-7176", "19910722-7184", "19910722-7192",
                "19910722-7200", "19910722-7218", "19910722-7226", "19910722-7234", "19910722-7242",
                "19910722-7259", "19910722-7267", "19910722-7275", "19910722-7283", "19910722-7291",
                "19910722-7309", "19910722-7317", "19910722-7325", "19910722-7333", "19910722-7341",
                "19910722-7358", "19910722-7366", "19910722-7374", "19910722-7382", "19910722-7390",
                "19910722-7408", "19910722-7416", "19910722-7424", "19910722-7432", "19910722-7440",
                "19910722-7457", "19910722-7465", "19910722-7473", "19910722-7481", "19910722-7499",
                "19910722-7507", "19910722-7515", "19910722-7523", "19910722-7531", "19910722-7549",
                "19910722-7556", "19910722-7564", "19910722-7572", "19910722-7580", "19910722-7598",
                "19910722-7606", "19910722-7614", "19910722-7622", "19910722-7630", "19910722-7648",
                "19910722-7655", "19910722-7663", "19910722-7671", "19910722-7689", "19910722-7697",
                "19910722-7705", "19910722-7713", "19910722-7721", "19910722-7739", "19910722-7747",
                "19910722-7754", "19910722-7762", "19910722-7770", "19910722-7788", "19910722-7796",
                "19910722-7804", "19910722-7812", "19910722-7820", "19910722-7838", "19910722-7846",
                "19910722-7853", "19910722-7861", "19910722-7879", "19910722-7887", "19910722-7895",
                "19910722-7903", "19910722-7911", "19910722-7929", "19910722-7937", "19910722-7945",
                "19910722-7952", "19910722-7960", "19910722-7978", "19910722-7986", "19910722-7994",
                "19910722-8000", "19910722-8018", "19910722-8026", "19910722-8034", "19910722-8042",
                "19910722-8059", "19910722-8067", "19910722-8075", "19910722-8083", "19910722-8091",
                "19910722-8109", "19910722-8117", "19910722-8125", "19910722-8133", "19910722-8141",
                "19910722-8158", "19910722-8166", "19910722-8174", "19910722-8182", "19910722-8190",
                "19910722-8208", "19910722-8216", "19910722-8224", "19910722-8232", "19910722-8240",
                "19910722-8257", "19910722-8265", "19910722-8273", "19910722-8281", "19910722-8299",
                "19910722-8307", "19910722-8315", "19910722-8323", "19910722-8331", "19910722-8349",
                "19910722-8356", "19910722-8364", "19910722-8372", "19910722-8380", "19910722-8398",
                "19910722-8406", "19910722-8414", "19910722-8422", "19910722-8430", "19910722-8448",
                "19910722-8455", "19910722-8463", "19910722-8471", "19910722-8489", "19910722-8497",
                "19910722-8505", "19910722-8513", "19910722-8521", "19910722-8539", "19910722-8547",
                "19910722-8554", "19910722-8562", "19910722-8570", "19910722-8588", "19910722-8596",
                "19910722-8604", "19910722-8612", "19910722-8620", "19910722-8638", "19910722-8646",
                "19910722-8653", "19910722-8661", "19910722-8679", "19910722-8687", "19910722-8695",
                "19910722-8703", "19910722-8711", "19910722-8729", "19910722-8737", "19910722-8745",
                "19910722-8752", "19910722-8760", "19910722-8778", "19910722-8786", "19910722-8794",
                "19910722-8802", "19910722-8810", "19910722-8828", "19910722-8836", "19910722-8844",
                "19910722-8851", "19910722-8869", "19910722-8877", "19910722-8885", "19910722-8893",
                "19910722-8901", "19910722-8919", "19910722-8927", "19910722-8935", "19910722-8943",
                "19910722-8950", "19910722-8968", "19910722-8976", "19910722-8984", "19910722-8992",
                "19910722-9008", "19910722-9016", "19910722-9024", "19910722-9032", "19910722-9040",
                "19910722-9057", "19910722-9065", "19910722-9073", "19910722-9081", "19910722-9099",
                "19910722-9107", "19910722-9115", "19910722-9123", "19910722-9131", "19910722-9149",
                "19910722-9156", "19910722-9164", "19910722-9172", "19910722-9180", "19910722-9198",
                "19910722-9206", "19910722-9214", "19910722-9222", "19910722-9230", "19910722-9248",
                "19910722-9255", "19910722-9263", "19910722-9271", "19910722-9289", "19910722-9297",
                "19910722-9305", "19910722-9313", "19910722-9321", "19910722-9339", "19910722-9347",
                "19910722-9354", "19910722-9362", "19910722-9370", "19910722-9388", "19910722-9396",
                "19910722-9404", "19910722-9412", "19910722-9420", "19910722-9438", "19910722-9446",
                "19910722-9453", "19910722-9461", "19910722-9479", "19910722-9487", "19910722-9495",
                "19910722-9503", "19910722-9511", "19910722-9529", "19910722-9537", "19910722-9545",
                "19910722-9552", "19910722-9560", "19910722-9578", "19910722-9586", "19910722-9594",
                "19910722-9602", "19910722-9610", "19910722-9628", "19910722-9636", "19910722-9644",
                "19910722-9651", "19910722-9669", "19910722-9677", "19910722-9685", "19910722-9693",
                "19910722-9701", "19910722-9719", "19910722-9727", "19910722-9735", "19910722-9743",
                "19910722-9750", "19910722-9768", "19910722-9776", "19910722-9784", "19910722-9792",
                "19910722-9800", "19910722-9818", "19910722-9826", "19910722-9834", "19910722-9842",
                "19910722-9859", "19910722-9867", "19910722-9875", "19910722-9883", "19910722-9891",
                "19910722-9909", "19910722-9917", "19910722-9925", "19910722-9933", "19910722-9941",
                "19910722-9958", "19910722-9966", "19910722-9974", "19910722-9982", "19910722-9990"
        ).stream()
                .peek(System.out::println)
                .peek(pnr -> assertTrue(Personnummer.parse(pnr).isPresent()));
    }

    @Test
    public void testSsnParseOK() {
        // OK test
        for (String okPnr : _pnrOKList) {
            Optional<Personnummer> pnrOpt = Personnummer.parse(okPnr);
            assertTrue("Personnummer '" + okPnr + "' should be correct, but its not!", pnrOpt.isPresent());
            int len = okPnr.length();
            Assert.assertEquals("Calculated checksum is wrong compared to original", okPnr.substring(len - 1),
                    ("" + pnrOpt.get().getChecksum()));
        }
    }

    @Test
    public void testPnrParsePlusHundredYearsOldOK() {
        assertTrue(Personnummer.parse("010101+0106").get().isHundredYears());
        assertTrue(Personnummer.parse("010101+0106").get().getBirthDate().isBefore(LocalDate.now().minusYears(100)));
    }

    @Test
    public void testPnrParseEmptyNOK() {
        // NOK test
        Assert.assertFalse(Personnummer.parse(null).isPresent());
        Assert.assertFalse(Personnummer.parse(null, false).isPresent());
        Assert.assertFalse(Personnummer.parse(null, true).isPresent());
        Assert.assertFalse(Personnummer.parse("").isPresent());
        Assert.assertFalse(Personnummer.parse("", false).isPresent());
        Assert.assertFalse(Personnummer.parse("", true).isPresent());
    }

    @Test
    public void testPnrWithEraAndPlusNOK() {
        // illegal combination, can not have both era AND a plus sign at the
        // same time
        Assert.assertFalse(Personnummer.parse("19010101+0106").isPresent());
    }

    @Test
    public void testPnrNoChecksumAndNotForgivingNOK() {
        Assert.assertFalse(Personnummer.parse("010101010", false).isPresent());
        Assert.assertFalse(Personnummer.parse("19010101010", false).isPresent());
    }

    @Test
    public void testPnrMonthNOK() {
        // Month = 20
        Assert.assertFalse(Personnummer.parse("012003-0012").isPresent());
        Assert.assertFalse(Personnummer.parse("012003-0012", false).isPresent());
        Assert.assertFalse(Personnummer.parse("012003-0012", true).isPresent());

        Assert.assertFalse(Personnummer.parse("012003+0012").isPresent());
        Assert.assertFalse(Personnummer.parse("012003+0012", false).isPresent());
        Assert.assertFalse(Personnummer.parse("012003+0012", true).isPresent());

        Assert.assertFalse(Personnummer.parse("19012003-0012").isPresent());
        Assert.assertFalse(Personnummer.parse("19012003-0012", false).isPresent());
        Assert.assertFalse(Personnummer.parse("19012003-0012", true).isPresent());

        Assert.assertFalse(Personnummer.parse("20012003-0012").isPresent());
        Assert.assertFalse(Personnummer.parse("20012003-0012", false).isPresent());
        Assert.assertFalse(Personnummer.parse("20012003-0012", true).isPresent());

        // Month = 99
        Assert.assertFalse(Personnummer.parse("019903-0012").isPresent());
        Assert.assertFalse(Personnummer.parse("019903-0012", false).isPresent());
        Assert.assertFalse(Personnummer.parse("019903-0012", true).isPresent());

        Assert.assertFalse(Personnummer.parse("019903+0012").isPresent());
        Assert.assertFalse(Personnummer.parse("019903+0012", false).isPresent());
        Assert.assertFalse(Personnummer.parse("019903+0012", true).isPresent());

        Assert.assertFalse(Personnummer.parse("19019903-0012").isPresent());
        Assert.assertFalse(Personnummer.parse("19019903-0012", false).isPresent());
        Assert.assertFalse(Personnummer.parse("19019903-0012", true).isPresent());

        Assert.assertFalse(Personnummer.parse("20019903-0012").isPresent());
        Assert.assertFalse(Personnummer.parse("20019903-0012", false).isPresent());
        Assert.assertFalse(Personnummer.parse("20019903-0012", true).isPresent());
    }

    @Test
    public void testPnrParseNOK() {
        _pnrNOKList.stream()
                .forEach(p -> Assert.assertFalse("False candidates for Pnr '" + p + "' should not be valid, but was!",
                        Personnummer.parse(p).isPresent()));
    }

    @Test
    public void testFutureDateOK() {
        Optional<Personnummer> pOpt = Personnummer.parse("2112121212", true);
        assertTrue("Date of birth can not be in the future", pOpt.isPresent());
    }

    @Test
    public void testFutureDateNOK() {
        Optional<Personnummer> pOpt = Personnummer.parse("211212121212");
        Assert.assertFalse("Date of birth can not be in the future", pOpt.isPresent());
    }

    /*
     * Equals tests
     */

    @Test
    public void testSsn10Equals() {
        for (String okPnr : _pnrOKList) {
            Personnummer pnr = Personnummer.parse(okPnr).get();
            if (pnr.isHundredYears()) {
                /*
                 * Skipping equals check when '+' sign is present, and we
                 * extract 10 digits, we loose the '+' sign and born date more
                 * than 100 years back is no longer detectable by any parse
                 * method.
                 */
                continue;
            }
            Personnummer pnr10 = Personnummer.parse(pnr.toString10()).get();
            Assert.assertEquals(pnr, pnr10);
        }
    }

    @Test
    public void testSsn11Equals() {
        _pnrOKList.stream().forEach(p -> {
            Assert.assertEquals(Personnummer.parse(p).get().toString(), Personnummer.parse(p).get().toString11());
        });

        _pnrOKList.stream().forEach(p -> {
            Personnummer pnr = Personnummer.parse(p).get();
            Personnummer pnr11 = Personnummer.parse(pnr.toString11()).get();
            if (p.length() == 13 && Integer.parseInt(p.substring(0, 2)) < ERA_MINUS_ONE) {
                Assert.assertNotSame(pnr, pnr11);
            }
        });
    }

    @Test
    public void testSsn12Equals() {
        _pnrOKList.stream().forEach(p -> {
            Assert.assertEquals(Personnummer.parse(p).get(),
                    Personnummer.parse(Personnummer.parse(p).get().toString12()).get());
        });
    }

    @Test
    public void testSsn13Equals() {
        _pnrOKList.stream().forEach(p -> {
            Assert.assertEquals(Personnummer.parse(p).get(),
                    Personnummer.parse(Personnummer.parse(p).get().toString13()).get());
        });
    }

    /*
     * Test Helper class features
     */

    @Test
    public void testZodiacSign() {
        String[][] pnrArr = {
                // start // middle // end
                {"CAPRICORNUS", "120101-0000", "120115-0000", "120119-0000"},
                {"AQUARIUS", "120120-0000", "120215-0000", "120218-0000"},
                {"PISCES", "120219-0000", "120315-0000", "120320-0000"},

                {"ARIES", "120321-0000", "120415-0000", "120419-0000"},
                {"TAURUS", "120420-0000", "120515-0000", "120521-0000"},
                {"GEMINI", "120522-0000", "120615-0000", "120621-0000"},

                {"CANCER", "120622-0000", "120715-0000", "120722-0000"},
                {"LEO", "120723-0000", "120815-0000", "120822-0000"},
                {"VIRGO", "120823-0000", "120915-0000", "120922-0000"},

                {"LIBRA", "120923-0000", "121015-0000", "121022-0000"},
                {"SCORPIO", "121023-0000", "121115-0000", "121121-0000"},
                {"SAGITTARIUS", "121222-0000", "121225-0000", "121231-0000"}};
        for (int x = 0; x < pnrArr.length; x++) {
            PnrZodiacType zodiacSign = PnrZodiacType.valueOf(PnrZodiacType.class, pnrArr[x][0]);
            for (int y = 1; y < 3; y++) {
                Optional<Personnummer> tempPnr = Personnummer.parse(pnrArr[x][y], true);
                if (tempPnr.isPresent()) {
                    Assert.assertEquals(zodiacSign, PersonnummerHelper.getZodiacSign(Personnummer.parse(pnrArr[x][y], true).get()).get());
                }
            }
        }
    }

    @Test
    public void testGenderOK() {
        for (String okPnr : _pnrOKList) {
            Personnummer pnr = Personnummer.parse(okPnr).get();
            boolean isEven = (Integer.parseInt(pnr.getLastFour().substring(2, 3)) % 2 == 0);
            Assert.assertEquals((isEven ? "woman" : "man"), pnr.getGender("woman", "man"));
            assertTrue(pnr.getGender() == GenderType.MALE || pnr.getGender() == GenderType.FEMALE);
        }
    }

    @Test
    public void testPnrToString() {
        for (String okPnr : _pnrOKList) {
            Personnummer pnr = Personnummer.parse(okPnr).get();
            assertTrue(pnr.getAgeNow() >= 0);
            Assert.assertEquals(11, pnr.toString().length());
            Assert.assertEquals(10, pnr.toString10().length());
            Assert.assertEquals(11, pnr.toString11().length());
            Assert.assertEquals(12, pnr.toString12().length());
            Assert.assertEquals(13, pnr.toString13().length());

            assertTrue(pnr.toString11().contains("-") || pnr.toString11().contains("+"));
        }
    }

    @Test
    public void testSsnLast4Digits() {
        for (String okPnr : _pnrOKList) {
            Personnummer pnr = Personnummer.parse(okPnr).get();
            Assert.assertEquals(4, pnr.getLastFour().length());
            int last4 = Integer.parseInt(pnr.getLastFour());
            assertTrue(last4 >= 0 && last4 <= 9999);
        }
    }

    @Test
    public void testSsnAge() {
        _pnrOKList.stream()
                .forEach(p -> assertTrue(Personnummer.parse(p).get().getAgeNow() >= 0));
    }

    @Test
    public void testGetDaysFromBirth() {
        try {
            int rand = PersonnummerHelper.dice(1, 130);
            LocalDate earlier = LocalDate.now().minusDays(rand);
            new PersonnummerBuilder().setStartAndEndDate(earlier, earlier).build().forEach(p -> Assert.assertEquals(rand, p.getDaysSinceBirth()));
        } catch (PersonnummerException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void testSsnPlusSign() {
        Personnummer pnr1 = Personnummer.parse("121212+1212").get();
        assertTrue(pnr1.isHundredYears());
        assertTrue(pnr1.toString().contains("+"));
        assertTrue(pnr1.toString11().contains("+"));

        Personnummer pnr2 = Personnummer.parse("19121212-1212").get();
        assertTrue(pnr2.isHundredYears());
        assertTrue(pnr2.toString().contains("+"));
        assertTrue(pnr2.toString11().contains("+"));

        Personnummer pnr3 = Personnummer.parse("191212121212").get();
        assertTrue(pnr3.isHundredYears());
        assertTrue(pnr3.toString().contains("+"));
        assertTrue(pnr3.toString11().contains("+"));
    }

    @Test
    public void testSsnBirthDate() throws Exception {
        final String DAY_OF_WEEK = "EEEE";
        Optional<Personnummer> pnrOpt = Personnummer.parse("194604300014");
        Personnummer pnr = pnrOpt.orElseThrow(() -> new Exception("Not a valid Personnummer"));
        _pnrOKList.forEach(p -> Assert.assertNotNull(Personnummer.parse(p).get().getBirthDate()));
    }
}